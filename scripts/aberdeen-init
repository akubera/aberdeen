#!/usr/bin/env python3
#
# aberdeen-init
#
"""
The program which a user may use to automatically create an Aberdeen blog with
hooks and configuration files.
"""

import sys, os
import aberdeen

def arguments(parser):
    parser.add_argument("--defaults", dest="interactive", action="store_false", help="Run with program without asking for user configuration.")
    parser.add_argument("-f", "--force", dest="force", action="store_true", help="Will install regardless of files existing in directory.")
    parser.add_argument("dir_name", help="The directory to install the files to")
    return parser.parse_args()

def err_str(err, *args):
    return err.format(*args)

def warning_err(err, *args):
    from termcolor2 import c
    fatal = c("warning:").yellow + " "
    print (fatal + err.format(*args), file=sys.stderr)

def fatal_err(err, *args):
    from termcolor2 import c
    fatal = c("Error:").red + " "
    print (fatal + err.format(*args), file=sys.stderr)

def prompt_user(name, default=None, do_strip=True):
    request = name
    if default is not None:
        request += " [{}]".format(default)
    request += ": "
    res = input(request)
    if do_strip:
        res = res.strip()
    if not res:
        if default is None:
            warning_err("Empty string given with no defaults.")
        res = default
    return res

def get_default_port(dbtype):
    return {
        'mongodb': '27017',
        'postgres': '5432',
        'mariadb': '3307'
    }.get(dbtype, None)

def main():
    from argparse import ArgumentParser
    from configparser import ConfigParser, ExtendedInterpolation
    import subprocess

    aberdeen_path = os.path.dirname(aberdeen.__file__)
    git_hook = lambda f: os.path.join(aberdeen_path, 'git_hooks', f)

    args = arguments(ArgumentParser())
    try:
        subprocess.check_call(["git", "init", "--bare", args.dir_name])
    except:
        fatal_err("`git init` returned an error")
        sys.exit(1)

    # if os.path.exists(args.dir_name) and os.path.isdir(args.dir_name):
    #     if os.listdir(args.dir_name) and not args.force:
    #         fatal_err("directory '{}' exists and is not empty", args.dir_name)
    #         sys.exit(1)
    # elif os.path.isfile(args.dir_name):
    #     fatal_err("file '{}' exists and is not directory", args.dir_name)
    #     sys.exit(1)

    config = ConfigParser()
    # config.add_section('database')
    # config['database']['xxx']
    # db_config = config['database']

    c, db = dict(), dict()
    db['type'] = prompt_user("Database type", 'mongodb')
    db['host'] = prompt_user("Database host", 'localhost')
    db['port'] = prompt_user("Database port", get_default_port(db['type']))
    db['name'] = prompt_user("Database name", args.dir_name)
    db['blog_name'] = 'something'

    c['database'] = db

    config.read_dict(c)

    # name = input("Database host [localhost]: ").strip()
    # if not host: host = 'localhost'
    # config.add_section('Section1')
    # config.set('Section1', 'an_int', '15')

    hook_name = lambda f: os.path.join(args.dir_name, 'hooks', f)
    #
    conf_filename = hook_name('aberdeen.cfg')
    # os.path.join(args.dir_name, 'hooks', 'aberdeen.cfg')
    with open(conf_filename, 'w') as cfg_file:
        cfg_file.write("# Automatically generated by the aberdeen-init script")
        cfg_file.write("\n\n")
        config.write(cfg_file)
    os.chmod(conf_filename, 0o640)

    with open(hook_name('update'), 'w') as new_hook:
        with open(git_hook('update'), 'r') as u_hook:
            new_hook.write(u_hook.read())
    os.chmod(hook_name('update'), 0o750)

    with open(hook_name('post-update'), 'w') as new_hook:
        with open(git_hook('post-update'), 'r') as u_hook:
            new_hook.write(u_hook.read())
    os.chmod(hook_name('post-update'), 0o750)



if __name__ == "__main__":
    main()
