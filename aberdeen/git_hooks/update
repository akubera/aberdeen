#!/usr/bin/env python3
#
# update
#
# The 'update' git hook for verifying the publish branch
#
"""
To use this, copy this file into the 'hooks' directory in your server's git
repository. Also, add a configuration file to tell aberdeen where to send
the generated blog posts.
"""

import sys

#print("===update===")
#print ("Args:", sys.argv)

branch, old_commit, new_commit = sys.argv[1:4]

if branch.split('/')[-1] == 'publish':
    print ("Pushing update to publish branch. Inspecting files:")
    import aberdeen
    from markdown import Markdown
    from termcolor2 import c

    # Gets filename of changed files
    diff_cmd = "diff --name-only %s %s -- *.md" % (old_commit, new_commit)
    changed_filenames = aberdeen.call_git(diff_cmd.split()).strip()

    # Gets the filename and 'blob id' of files which have been changed
    ls_tree_cmd = 'ls-tree --full-name -r %s' % (new_commit)
    allfiles = aberdeen.call_git(ls_tree_cmd).split('\n')[:-1]
    files_changed = [
        {'name': line.split()[3], 'blob': line.split()[2]}
        for line in allfiles if line.split('\t')[-1] in changed_filenames
    ]
    # print (files_changed)
    errors = []
    for file in files_changed:
        print("Testing", file['name'], end=' ')
        cat_cmd = "cat-file blob " + file['blob']
        markdown = aberdeen.call_git(cat_cmd.split())
    #    print (" contents:\n----\n", markdown, "----")
        try:
            aberdeen.generate_from_markdown(markdown)
            print(c('✓').green)
        except Exception as err:
            print(c('✗').red)
            err = "  %s\n%s\n" % (file['name'], str(err))
            errors.append(err)

    if errors:
        print("Errors:")
        print("\n".join(errors))
        print(("** The commit was NOT accepted. Please fix the issues and "
               "push the changes again.\n"))
        sys.exit(1)

    print ("No Errors found, continuing.")
